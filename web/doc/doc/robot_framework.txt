üîπ Ambiente Python:
    py -3 -m venv .venv ou python -m venv .venv
    .\.venv\Scripts\Activate.ps1
    pip --version (Para consultar vers√£o do pip)
    python --version (Para consultar vers√£o do Python)
    robot --version (Para consultar vers√£o do Robot)
    pip list (Para listar as bibliotecas instaladas)
    pip freeze (Para listar as bibliotecas instaladas)
    pip install -U pip (Para atualizar o pip)
  
üîπ Bibliotecas Robotframework:

    Existem v√°rias bibliotecas em Python que podem ser usadas. 
    Para fazer web scraping pegar dados, e robotframework para testes de interface.
    
    Crawler - Web scraping - Pegar dados da web 
    Robotframework - Testes de interface
    
    üìå Algumas das bibliotecas mais populares s√£o:
        pip3 install robotframework (Para instalar o Robot)
        pip3 install robotframework-faker (Para instalar o Faker) 
        pip3 install robotframework-requests==0.5.0 (Para instalar o Requests)
        pip3 install robotframework-seleniumlibrary (Para instalar o selenium library) 
        pip install -U robotframework-requests==0.7.2 - Automa√ß√£o de teste de aceita√ß√£o
        pip install scrapy  - Crawler spider para pegar dados da web
        pip install mysql-connector-python - Conex√£o com banco de dados MySQL
        pip install cryptography - Criptografia em Python 
        pip install beautifulsoup4 - Analisar e extrair dados de documentos HTML e XML 
        pip install robotframework - Automa√ß√£o de teste de aceita√ß√£o 
        pip install requests - Requisi√ß√µes HTTP em Python 
        pip install selenium - Automatizar a intera√ß√£o com p√°ginas web 
        pip install pyquery - Analisar e extrair dados de documentos HTML usando seletores CSS 
        pip install python-dateutil - Trabalhar com datas e hor√°rios em Python 
        pip install robotframework-seleniumlibrary - Automa√ß√£o de teste de aceita√ß√£o
        pip install pandas - Manipula√ß√£o e an√°lise de dados
        pip install robotframework-databaselibrary - Automa√ß√£o de teste de aceita√ß√£o
        pip install mysql-connector-python - Conex√£o com banco de dados MySQL
        pip install pyodbc - Conex√£o com banco de dados SQL Server
        pip install robotframework (Para instalar o Robot)
        pip install robotframework-seleniumlibrary (Para instalar o selenium library)
        pip install -U robotframework-seleniumlibrary (Para atualizar a biblioteca)
        pip install --upgrade robotframework-requests 
        pip install --upgrade robotframework-seleniumlibrary 
	    python -m pip install --upgrade pip
        pip install robotframework-databaselibrary (Para instalar o banco de dados)
        pip install robotframework-pabot (Para instalar o pabot)
        pip install robotframework-ride (Para instalar o ride)
        pip install robotframework-requests (Para instalar o requests)
        pip install -U robotframework-difflibrary (Para instalar o difflibrary)
        BeautifulSoup: uma biblioteca para analisar e extrair dados de documentos HTML e XML. 
        Requests: uma biblioteca para fazer requisi√ß√µes HTTP em Python.
        Selenium: uma biblioteca para automatizar a intera√ß√£o com p√°ginas web, incluindo preenchimento 
        de formul√°rios e simula√ß√£o de cliques em bot√µes. 
        PyQuery: uma biblioteca para analisar e extrair dados de documentos HTML usando seletores CSS. 
        Cryptography: uma biblioteca para criptografia em Python. pip install cryptography
        Datetime e Dateutil: bibliotecas para trabalhar com datas e hor√°rios em Python. 

        Cada biblioteca tem suas pr√≥prias vantagens e desvantagens, e a 
         escolha da biblioteca depende do caso de uso espec√≠fico. 
         O Scrapy √© uma biblioteca poderosa e flex√≠vel para web scraping, 
         mas pode ser um pouco mais complexa de usar do que outras bibliotecas. 
         O BeautifulSoup √© uma biblioteca popular e f√°cil de usar para analisar documentos HTML, 
         enquanto o Selenium √© √∫til para interagir com p√°ginas web que usam JavaScript.

üîπ Estrutura Robotframework:

    üìå Ideias de Brainstorming sobre Automa√ß√£o de Testes com Robot Framework

        - Como criar uma estrutura de projeto eficiente
        - Melhores pr√°ticas para escrever testes automatizados
        - Como integrar o Robot Framework com outras ferramentas de automa√ß√£o
        - Como lidar com problemas comuns em testes automatizados
        - Como escrever testes para diferentes tipos de aplica√ß√µes (desktop, web, mobile)
        - Como gerar relat√≥rios de testes detalhados

    üìå Exemplo: teste de interface com o Robot Framework
    
        ** Settings **
        Library  SeleniumLibrary

        ** Variables **
        ${URL}       https://robotframework.org
        ${BROWSER}   chrome


        ** Keywords **
        Abrir Site
            Open Browser  ${URL}  ${BROWSER}

        ** Test Cases **
        Cen√°rio 1: Acessando o site do Robot
            Abrir Site

    üìå Aqui est√° uma explica√ß√£o de cada se√ß√£o do arquivo `estrutura.robot`:

        # - `***Settings***`: Esta se√ß√£o √© usada para definir as configura√ß√µes do projeto, como bibliotecas, 
        # vari√°veis globais e configura√ß√µes de execu√ß√£o. Por exemplo, voc√™ pode definir a biblioteca Selenium 
        # para automatizar testes em um navegador da web.

        # - `***Variables***`: Esta se√ß√£o √© usada para definir vari√°veis que podem ser usadas em todo o projeto. 
        # Por exemplo, voc√™ pode definir uma vari√°vel para armazenar o URL do site que est√° sendo testado.

        # - `***Keywords***`: Esta se√ß√£o √© usada para definir palavras-chave personalizadas 
        # que podem ser usadas em todo o projeto. Por exemplo, voc√™ pode definir uma palavra-chave para fazer login em um site.

        # - `***Test Cases***`: Esta se√ß√£o √© usada para definir casos de teste. Cada caso de teste 
        # √© definido como um conjunto de etapas que o Robot Framework executar√°. Por exemplo, voc√™ pode 
        # definir um caso de teste para fazer login em um site e verificar se o usu√°rio √© redirecionado para a p√°gina correta.

        # Cada se√ß√£o √© definida com tr√™s asteriscos (`***`) seguidos pelo nome da se√ß√£o. 
        # As se√ß√µes s√£o encerradas com uma linha em branco. As se√ß√µes `***Settings***`, `***Variables***` e `***Keywords***` 
        # podem ser definidas em qualquer ordem, mas a se√ß√£o `***Test Cases***` deve ser a √∫ltima se√ß√£o no arquivo.

        # O Robot Framework √© uma ferramenta de automa√ß√£o de teste de aceita√ß√£o de c√≥digo aberto 
        que utiliza uma sintaxe f√°cil de ler e escrever em arquivos de texto simples.  

        # O Robot Framework usa o conceito "keywords driving" refere-se ao uso de palavras-chave 
        personalizadas para dirigir a automa√ß√£o de teste.

üîπ Estrutura XPath:
    
    üìå Estrutura XPath 1:
    
       üìå Atencao: O indetificador unico do elemento que pode ser "name", "id", "class", "xpath"
       
            Exemplo 1: //button[@id='name']
            Sempre comeca com duas barras // e depois o nome da elemento que pode ser "input" , "button" , select , div , tbody
            e assim por diante, depois abre colchetes e coloca o atributo que pode ser id, name, class, type, value, etc. 
            
            Exemplo 2:         //*[@id='name']
            #             xpath=//*[@id="name"]
            Podemos usar o asterisco * para selecionar qualquer elemento, e nao precisamos colocar o nome do elemento.
            Essa pode ser um seletor mais gen√©rico, pois seleciona qualquer elemento que tenha um atributo id com o valor name.

            Exemplo 3:         //*[contains(@id,'name')]
            #                   //button[@id='name']
            #                    //*[@id="name"]
           
            # No caso button, depois abre colchetes e coloca o atributo 
	        # Essa estrutura XPath √© composta por um caminho de sele√ß√£o que come√ßa com o caractere
	        # `//`, que significa que a sele√ß√£o pode come√ßar em qualquer lugar do documento. 
	        # Em seguida, temos o caractere `*`, que significa que estamos selecionando qualquer elemento. 
	        # Depois, temos o atributo `id` com o valor `name`, que √© especificado entre colchetes. 
	        # Isso significa que estamos selecionando qualquer elemento que tenha um atributo `id` com o valor `name`. 
            # Em resumo, essa estrutura XPath seleciona qualquer elemento que 
	        # tenha um atributo `id` com o valor `name` em qualquer lugar do documento. 
	        # Essa estrutura XPath √© composta por um caminho de sele√ß√£o que come√ßa com o caractere
	        # `//`, que significa que a sele√ß√£o pode come√ßar em qualquer lugar do documento. 
	        # Em seguida, temos o caractere `*`, que significa que estamos selecionando qualquer elemento. 
	        # Depois, temos o atributo `id` com o valor `name`, que √© especificado entre colchetes. 
	        # Isso significa que estamos selecionando qualquer elemento que tenha um atributo `id` com o valor `name`. 
            # Em resumo, essa estrutura XPath seleciona qualquer elemento que 
	        # tenha um atributo `id` com o valor `name` em qualquer lugar do documento.
    
    üìå Estrutura XPath 2:

        *** Settings ***
            Documentation    Teste de automa√ß√£o para preencher formul√°rio
                Library          SeleniumLibrary

        *** Variables ***
        ${BROWSER}        chrome
        ${TIMEOUT}        3s
        ${URL}            https://itera-qa.azurewebsites.net/home/automation
        ${NOME}           Arya Stark
        ${TELEFONE}       555-1234
        ${EMAIL}          arya.stark@winterfell.com
        ${SENHA}          123456
        ${ENDERECO}       Rua Winterfell

        *** Keywords ***
        Abrir o navegador e maximizar a janela
            [Arguments]    ${url}
            Open Browser    ${url}    ${BROWSER}
            Maximize Browser Window

        Preencher formul√°rio com dados
            [Arguments]    ${nome}    ${telefone}    ${email}    ${senha}    ${endereco}
            Input Text    xpath=//*[@id="name"]    ${nome}
            Input Text    xpath=//*[@id="phone"]    ${telefone}
            Input Text    xpath=//*[@id="email"]    ${email}
            Input Text    xpath=//*[@id="password"]    ${senha}
            Input Text    xpath=//*[@id="address"]    ${endereco}
            Click Element    xpath=//button[@name='submit']
            Capture Page Screenshot

        *** Test Cases ***
        Cenario 1 - Preencher formul√°rio com dados
            [Documentation]    Preenche o formul√°rio com dados
            [Tags]             formulario, iteratest
            Abrir o navegador e maximizar a janela    ${URL}
            Preencher formul√°rio com dados    ${NOME}    ${TELEFONE}    ${EMAIL}    ${SENHA}    ${ENDERECO}
            Sleep    3s
            Close Browser

    üìå Estrutura XPath 3:

        <select id="select" name="select">
            <option value="1">Coca Cola</option>
            <option value="2">Guarana </option>
            <option value="3">Sukita </option>
            <option value="4">Agua </option>
            <option value="5">Cerveja</option>
        
        Nao e boa pratica:
        //option[3] - Nao e boa pratica, por que voce pode ter mais de um elemento com o mesmo nome
        
        Boa pratica:
        //select[@id='select']/option[@value='1'] - Boa pratica, por que voce esta selecionando o elemento pelo atributo value
        //option[contains(text(),'Sukita')]       - Boa pratica, por que voce esta selecionando o elemento pelo texto

        Outras praticas:
        //select[@id='select']/option[@value='1']
        //option[@value='1']
        //option[@value='2']
        //option[@value='3']
        //option[@value='4']
        //option[@value='5']
        //option[@value='1']/text()

        # //option[@value='1']/text()
        # //option[@value='1']/@value
        # //option[@value='1']/@id
        # //option[@value='1']/@name
        # //option[@value='1']/@class

üîπO que √© BDD:

    üìå BDD significa Behavior-Driven Development (Desenvolvimento Orientado a Comportamento, em portugu√™s).
     
        √â uma t√©cnica de desenvolvimento de software que visa melhorar a comunica√ß√£o entre desenvolvedores, 
         gerentes de projeto e partes interessadas no projeto, como clientes e usu√°rios finais.

        O BDD √© baseado em testes automatizados que descrevem o comportamento esperado do software 
         em termos de cen√°rios de uso. Esses cen√°rios s√£o escritos em uma linguagem natural, 
         como o ingl√™s, e s√£o usados para validar o comportamento do software em rela√ß√£o aos requisitos do usu√°rio.

        O BDD √© uma abordagem colaborativa que envolve todas as partes interessadas no projeto, 
         desde o in√≠cio do desenvolvimento at√© a entrega do software. Ele ajuda a garantir que o 
         software atenda aos requisitos do usu√°rio e que os testes sejam escritos em uma linguagem 
         clara e compreens√≠vel para todos os envolvidos no projeto.

        No Robot Framework, o BDD √© implementado usando a sintaxe Gherkin, que √© uma linguagem de 
         especifica√ß√£o de comportamento. Os cen√°rios s√£o escritos em arquivos .feature e 
         s√£o executados usando as bibliotecas de teste do Robot Framework.
    
    üìå Estrutura BDD

        ***Settings***
        Library                                     SeleniumLibrary
        # Library e a biblioteca que vai ser utilizada no projeto

        ***Variables***
        # Variables sao as variaveis que vao ser utilizadas no projeto
        ${NOMEDAMUSICA}                             Alok - Ocean (feat. Zeeba & IRO) | Lyric Video - YouTube
        ${BROWSER}                                  Chrome
        ${URL}                                      https://www.youtube.com/
        ${INPUT_PESQUISA}                           //input[@id='search']
        ${BUTTON_PESQUISA}                          //button[@id='search-icon-legacy']
        ${PRIMEIRO}                                 (//yt-formatted-string[@class="style-scope ytd-video-renderer"])[1]
        ${PROVA}                                    //*[@id="movie_player"]

        ***Keywords***
        Dado que eu acesso o site do youtube
        Open Browser                            ${URL}  ${BROWSER} 
        Maximize Browser Window
        Set Selenium Speed                       0.5s

        Quando eu digito o nome da musica
        Input Text                              ${INPUT_PESQUISA}    ${NOMEDAMUSICA}

        E clico no botao de pesquisa
        Click Element                           ${BUTTON_PESQUISA}

        E clico na primeira opcao da lista
        Wait Until Element Is Visible           ${PRIMEIRO}
        Click Element                           ${PRIMEIRO}

        Entao o video e executado
        Wait Until Element Is Visible           ${PROVA}
        Sleep                                   300s
        Close Browser

        ***Test Cases***
        Cenario 1: Executar video no site do youtube
        Dado que eu acesso o site do youtube 
        # "Given" que eu acesso o site do youtube
        Quando eu digito o nome da musica
        # "When" eu digito o nome da musica
        E clico no botao de pesquisa
        # "And" clico no botao de pesquisa
        E clico na primeira opcao da lista
        # "And" clico na primeira opcao da lista
        Entao o video e executado
        # "Then" o video e executado

    üìå Exemplo xpath, robotframework acima:
            # (//yt-formatted-string[@class="style-scope ytd-video-renderer"])[1]
            #//*[@id="subscribe-button"]/ytd-button-renderer/yt-button-shape/button/yt-touch-feedback-shape/div/div[1]
            # //*[@id="video-title"]/yt-formatted-string
            # //*[@id="video-title"]/yt-formatted-string

üîπ Formas de execucao do Teste:

    üìå Arquivos gerados apos o teste: 
    
        Log | Report | Output

        Todos os teste rodando no paramentro BDD ou tradicional vai gerar 
         alguns arquivos, como arquivo de logs para verificar quais teste deu errado, 
         report vai gerar um arquivo para detalhar mais todo teste que foi executado, 
         output vai gerar um arquivo com o resultado de todos os teste que foram
         executados.

        O Robot Framework gera tr√™s arquivos ap√≥s a execu√ß√£o dos testes: o arquivo de log, 
         o arquivo de relat√≥rio e o arquivo de sa√≠da.

        O arquivo de log cont√©m informa√ß√µes detalhadas sobre a execu√ß√£o dos testes, 
         incluindo informa√ß√µes sobre cada palavra-chave executada, o resultado de cada 
         teste e quaisquer erros ou exce√ß√µes que ocorreram durante a execu√ß√£o dos testes. 
         O arquivo de log √© √∫til para depurar problemas e entender o que aconteceu durante 
         a execu√ß√£o dos testes.

        O arquivo de relat√≥rio √© uma vers√£o resumida do arquivo de log e fornece uma vis√£o 
         geral dos resultados dos testes. Ele inclui informa√ß√µes sobre quantos testes foram 
         executados, quantos passaram e quantos falharam. O arquivo de relat√≥rio √© √∫til para 
         entender rapidamente o resultado geral dos testes.

        O arquivo de sa√≠da √© um arquivo de log em formato XML que pode ser usado para gerar 
         relat√≥rios personalizados ou integrar com outras ferramentas de teste. 
         Ele cont√©m informa√ß√µes detalhadas sobre a execu√ß√£o dos testes, incluindo informa√ß√µes 
         sobre cada palavra-chave executada, o resultado de cada teste e quaisquer erros ou 
         exce√ß√µes que ocorreram durante a execu√ß√£o dos testes.
        
    üìå Comandos de execucao:

        1 - robot bdd_4.robot | Executa todos os teste do arquivo
        2 - robot teste_4.robot | Executa todos os teste do arquivo
        3 - robot -d ./logs teste_4.robot | Executa todos os teste do arquivo e gera uma pasta 
            de log com os arquivo Log | Report | Output
        4 - robot -d logs teste_3.robot | Executa todos os teste do arquivo e 
            gera os arquivos Log | Report | Output dentro da pasta logs
        5 - robot -d logs -i "Cenario 1" teste_1.robot | Executa apenas o teste Cenario 1
        6 - robot -d logs -t "Cenario 1" teste_1.robot | Executa apenas o teste Cenario 1
        7 - robot -d logs -i "Cenario 1" -e "Cenario 2" teste_1.robot | Executa apenas o teste Cenario 1
            e ignora o teste Cenario 2
        8 - robot -d logs -i "Cenario 1" -e "Cenario 2" -v BROWSER:firefox teste_1.robot | Executa apenas o teste Cenario 1
            e ignora o teste Cenario 2 e executa no navegador firefox
        9 - robot -d logs -i "Cenario 1" -e "Cenario 2" -v BROWSER:opera -v URL:https://www.youtube.com/ teste_1.robot 
            | Executa apenas o teste Cenario 1
        10 robot -d logs -i "Cenario 1" -e "Cenario 2" -v BROWSER:Chrome -v URL:https://www.youtube.com/ teste_1.robot 
            | Executa apenas o teste Cenario 1
        11 - robot -d web test | Executa todos testes que estao dentro da pasta test
        12 - robot -d logs -t "Cenario 1" -v BROWSER:Chrome -v URL:https://www.youtube.com/ teste_1.robot 
            | Executa apenas o teste Cenario 1
        13 - robot -d logs -t "Cenario 1"  teste_1.robot
            | Executa apenas o teste Cenario 1
        14 - robot -d logs -i amazon test
            | Executa apenas o teste que tem a tag amazon
        
    üìå O que √© Suite:

        Uma suite de teste no Robot Framework √© um conjunto de testes que s√£o agrupados em um √∫nico arquivo. 
         Cada arquivo de teste pode conter v√°rias suites de teste, e cada suite de teste pode conter v√°rios casos de teste.

        Uma suite de teste √© definida usando a sintaxe *** Test Cases *** no arquivo de teste. 
         Dentro de uma suite de teste, voc√™ pode definir v√°rios casos de teste, cada um com sua pr√≥pria sintaxe 
         *** Test Case ***. Cada caso de teste pode conter v√°rias palavras-chave, 
         que s√£o usadas para executar a√ß√µes e verificar resultados.

        As suites de teste s√£o √∫teis para agrupar testes relacionados em um √∫nico arquivo 
         e para organizar seus testes de uma maneira que fa√ßa sentido para o seu projeto. 
         Por exemplo, voc√™ pode ter uma suite de teste para testar a funcionalidade de login 
         do seu aplicativo e outra suite de teste para testar a funcionalidade de checkout.

        Ao executar o Robot Framework, voc√™ pode escolher executar todas as suites de teste 
         em um arquivo ou apenas uma suite de teste espec√≠fica. Isso permite que voc√™ execute 
         testes espec√≠ficos ou execute todos os testes em um arquivo de uma s√≥ vez.


    üìå Exemplo de suite de teste, Pasta tambem pode ser Suite de teste

        ***Test Cases***

        Cenario 1 - Pesquisar site da Amazon
        Abrir site no Amazon    


        Cenario 2 - Pesquisar site do Facebook
        Abrir site no Facebook    
    

        Cenario 3 - Pesquisar site do Youtube
        Abrir site no Youtube    
    

        Cenario 4 - Pesquisar site do Robot Framework
        Abrir site no Robot Framework   
    
    üìå Teste Regressivo:

        O teste regressivo √© uma t√©cnica de teste que √© usada para garantir que as 
         altera√ß√µes feitas em um software n√£o afetem as funcionalidades existentes. 
         Ele √© executado ap√≥s uma altera√ß√£o no software, como uma corre√ß√£o de bug 
         ou uma nova funcionalidade, para garantir que as altera√ß√µes n√£o tenham 
         afetado as funcionalidades existentes.

        O teste regressivo envolve a execu√ß√£o de todos os testes existentes 
         no software ap√≥s uma altera√ß√£o ter sido feita. Isso √© feito para garantir
         que as altera√ß√µes n√£o tenham afetado as funcionalidades existentes e que 
         o software ainda esteja funcionando corretamente.

        O teste regressivo √© importante porque as altera√ß√µes feitas em um software 
         podem ter efeitos colaterais inesperados em outras partes do software. 
         O teste regressivo ajuda a identificar esses efeitos colaterais e a 
         garantir que o software ainda esteja funcionando corretamente ap√≥s 
         uma altera√ß√£o ter sido feita.

        O teste regressivo pode ser executado manualmente ou automaticamente. 
         A automa√ß√£o do teste regressivo √© geralmente preferida, pois √© mais 
         r√°pida e menos propensa a erros do que a execu√ß√£o manual. O Robot 
         Framework √© uma ferramenta de automa√ß√£o de teste que pode ser 
         usada para executar testes regressivos em um software 

    üìå Tags e Argumentos

        No Robot Framework, as tags e argumentos s√£o usados para organizar e personalizar seus testes.
        
        As tags s√£o palavras-chave que voc√™ pode adicionar a seus casos de teste e suites de teste 
         para agrup√°-los e organiz√°-los. Por exemplo, voc√™ pode adicionar a tag "login" a 
         todos os casos de teste que testam a funcionalidade de login do seu aplicativo. 
         Isso permite que voc√™ execute todos os testes de login de uma s√≥ vez, em vez de 
         ter que executar cada caso de teste individualmente.

        Os argumentos s√£o valores que voc√™ passa para suas palavras-chave para personalizar 
         a execu√ß√£o dos testes. Por exemplo, voc√™ pode passar um nome de usu√°rio e senha 
         como argumentos para uma palavra-chave de login. Isso permite que voc√™ execute 
         a palavra-chave de login com diferentes valores de nome de usu√°rio e senha em 
         diferentes casos de teste.

        As tags e argumentos s√£o √∫teis para organizar e personalizar seus testes de acordo 
         com as necessidades do seu projeto. Eles permitem que voc√™ execute testes espec√≠ficos
         ou agrupe testes relacionados em uma √∫nica execu√ß√£o.


üîπ Estrutura√ß√£o do Projeto de Teste

    üìå Ideias de Brainstorming sobre Automa√ß√£o de Testes com Robot Framework

        - Como criar uma estrutura de projeto eficiente
        - Melhores pr√°ticas para escrever testes automatizados
        - Como integrar o Robot Framework com outras ferramentas de automa√ß√£o
        - Como lidar com problemas comuns em testes automatizados
        - Como escrever testes para diferentes tipos de aplica√ß√µes (desktop, web, mobile)
        - Como gerar relat√≥rios de testes detalhados

    üìå Dicion√°rio de dados no Robot Framework

        O dicion√°rio de dados no Robot Framework √© uma estrutura de dados que √© usada para armazenar 
         informa√ß√µes que s√£o usadas em v√°rios testes. Ele √© definido como uma vari√°vel global no arquivo 
         de recursos e pode ser acessado em qualquer lugar do projeto.

        O dicion√°rio de dados √© √∫til para armazenar informa√ß√µes que s√£o usadas em v√°rios testes, 
         como URLs, nomes de usu√°rios, senhas e outras informa√ß√µes de configura√ß√£o. Ele permite que 
         voc√™ defina essas informa√ß√µes em um √∫nico lugar e as use em v√°rios testes, em vez de ter que
         definir as mesmas informa√ß√µes em cada caso de teste individualmente.

        O dicion√°rio de dados √© definido usando a sintaxe *** Variables *** no arquivo de recursos.
         Dentro dessa se√ß√£o, voc√™ pode definir v√°rias vari√°veis e atribuir valores a elas. 
         Essas vari√°veis podem ser acessadas em qualquer lugar do projeto usando a sintaxe ${nome_da_vari√°vel}.

        Por exemplo, voc√™ pode definir um dicion√°rio de dados para armazenar informa√ß√µes de login, como
         o nome de usu√°rio e a senha. Voc√™ pode ent√£o acessar essas informa√ß√µes em v√°rios testes usando 
         a sintaxe ${nome_de_usuario} e ${senha}.

        O dicion√°rio de dados √© uma ferramenta √∫til para organizar e reutilizar informa√ß√µes em seus 
         testes. Ele permite que voc√™ defina informa√ß√µes em um √∫nico lugar e as use em v√°rios testes, 
         o que pode economizar tempo e reduzir a duplica√ß√£o de c√≥digo.

    üìå O conceito de "Page Object" - Mapeamento do Teste
    
        E uma t√©cnica de automa√ß√£o de teste que √© usada para separar a l√≥gica de teste da l√≥gica 
         de interface do usu√°rio. Ele envolve a cria√ß√£o de objetos que representam as p√°ginas 
         do aplicativo e o uso desses objetos para interagir com a interface do usu√°rio durante a execu√ß√£o dos testes.

        O objetivo do "Page Object" √© criar uma camada de abstra√ß√£o entre os testes e a interface do usu√°rio. 
         Isso permite que os testes sejam mais f√°ceis de escrever e manter, pois a l√≥gica de interface do usu√°rio 
         √© encapsulada nos objetos de p√°gina. Al√©m disso, o "Page Object" permite que os testes sejam mais robustos, 
         pois as altera√ß√µes na interface do usu√°rio podem ser facilmente refletidas nos objetos de p√°gina, em vez de 
         exigir altera√ß√µes em todos os testes.

        No Robot Framework, o processo de teste de automa√ß√£o com "Page Object" envolve a cria√ß√£o de objetos 
         de p√°gina que representam as p√°ginas do aplicativo. Esses objetos de p√°gina s√£o ent√£o usados para interagir 
         com a interface do usu√°rio durante a execu√ß√£o dos testes.
        
        Por exemplo, voc√™ pode criar um objeto de p√°gina para representar a p√°gina de login do seu aplicativo.
         Esse objeto de p√°gina pode conter m√©todos para preencher o nome de usu√°rio e a senha, clicar no bot√£o 
         de login e verificar se o login foi bem-sucedido. Durante a execu√ß√£o dos testes, voc√™ pode usar esse 
         objeto de p√°gina para interagir com a p√°gina de login, em vez de ter que escrever c√≥digo para interagir 
         com a interface do usu√°rio diretamente.

        O uso de "Page Object" no processo de teste de automa√ß√£o com Robot Framework pode tornar seus testes 
         mais f√°ceis de escrever e manter, al√©m de torn√°-los mais robustos e menos propensos a erros. 

    üìå O que √©  `Setup` e o `Teardown`
    
        No Robot Framework, o `Setup` e o `Teardown` s√£o keywords especiais que s√£o executados antes e depois de cada caso de teste, 
         espectivamente. 

        O `Setup` √© usado para configurar o ambiente de teste antes da execu√ß√£o do caso de teste. 
         Por exemplo, pode ser usado para abrir um navegador ou para fazer login em um sistema.

        O `Teardown` √© usado para limpar o ambiente de teste ap√≥s a execu√ß√£o do caso de teste. 
         Por exemplo, pode ser usado para fechar o navegador ou para limpar dados de teste.

        Esses keywords s√£o √∫teis para garantir que o ambiente de teste esteja sempre em um estado 
         conhecido e consistente antes e depois da execu√ß√£o de cada caso de teste.

        Podemos dizer que o "test setup" serve para configurar o ambiente de teste antes da execu√ß√£o 
         do caso de teste e o "test teardown" serve para limpar o ambiente de teste ap√≥s a execu√ß√£o 
         do caso de teste.

         test setup - fazer teste em site de viagens e sempre fazer o cadastro antes de iniciar o teste
         test teardown - limpar o ambiente de teste ap√≥s a execu√ß√£o do caso de teste


        - `Test Setup`: √© um keyword especial que √© executado antes de cada caso de teste. 
         √â usado para configurar o ambiente de teste para um caso de teste espec√≠fico. 
         Por exemplo, pode ser usado para abrir um arquivo ou para limpar dados de teste.

        - `Suite Setup`: √© um keyword especial que √© executado uma vez antes de todos 
         os casos de teste em uma su√≠te de testes. √â usado para configurar o ambiente 
         de teste para todos os casos de teste em uma su√≠te. Por exemplo, pode ser usado 
         para abrir um navegador ou para fazer login em um sistema.

        - `Test Teardown`: √© um keyword especial que √© executado ap√≥s cada caso de teste. 
         √â usado para limpar o ambiente de teste ap√≥s a execu√ß√£o de um caso de teste espec√≠fico. 
         Por exemplo, pode ser usado para fechar um arquivo ou para limpar dados de teste.

        - `Suite Teardown`: √© um keyword especial que √© executado uma vez ap√≥s todos os casos de teste

üîπ Boas praticas Robotframework

    üìå Ideias de Brainstorming sobre Automa√ß√£o de Testes com Robot Framework

        - Como criar uma estrutura de projeto eficiente
        - Melhores pr√°ticas para escrever testes automatizados
        - Como integrar o Robot Framework com outras ferramentas de automa√ß√£o
        - Como lidar com problemas comuns em testes automatizados
        - Como escrever testes para diferentes tipos de aplica√ß√µes (desktop, web, mobile)
        - Como gerar relat√≥rios de testes detalhados
        - Nao colocar keyword da library diretamente no test Case
        - Nunca colocar elementos (xpath,id,css selector) diretamente nas Keywords
        - Sempre utilizar "wait until element is visible" ao realizar interacoes com elemento
        - Preferir utilizar "wait until element is visible" ao inves de utlizar "sleep"
        - Utilize um padrao de projeto caso va desenvolver um projeto de automacao grande
        - Olhe o log da execucao em caso de falha
        - Otimeze seu codigo para que ele seja facil de ler e manter

Anvacado
üîπ Bibliotecas Built-in 

    üìå O que s√£o bibliotecas built-in

        - **Built-in**: As keywords built-in s√£o as keywords padr√£o do Robot Framework que 
        est√£o dispon√≠veis sem a necessidade de importar bibliotecas externas. Algumas das 
        keywords built-in mais comuns incluem `Log`, `Should Be Equal`, `Run Keyword If`, `Run Keyword And Ignore Error`, entre outras.

        - **Argumentos esperados**: As keywords que esperam argumentos s√£o aquelas que recebem 
        um ou mais argumentos para executar uma a√ß√£o espec√≠fica. Por exemplo, 
        a keyword `Should Be Equal` espera dois argumentos: o valor esperado e o valor atual.
         Se esses valores n√£o forem iguais, a keyword falhar√°.

        - **Falhas previstas**: As falhas previstas s√£o aquelas que s√£o esperadas durante 
        a execu√ß√£o de um teste. Por exemplo, se voc√™ estiver testando uma fun√ß√£o que deve 
        retornar um erro quando um argumento inv√°lido √© passado, voc√™ pode usar 
        a keyword `Run Keyword And Expect Error` para verificar se a fun√ß√£o realmente
         retorna um erro.

        - **For**: A keyword `For` √© usada para iterar sobre uma lista ou um dicion√°rio. 
        Por exemplo, se voc√™ tiver uma lista de valores que deseja verificar usando a 
        keyword `Should Be Equal`, pode usar a keyword `For` para iterar sobre a lista 
        e verificar cada valor individualmente.

        - **Teardowns**: As keywords teardown s√£o usadas para executar a√ß√µes ap√≥s 
        a conclus√£o de um teste ou su√≠te de testes. Por exemplo, se voc√™ estiver
         testando uma aplica√ß√£o web, pode usar uma keyword teardown para fechar 
         o navegador ap√≥s a conclus√£o de cada teste. As keywords teardown s√£o 
         definidas usando a se√ß√£o 
         `*** Test Teardown ***` ou `*** Suite Teardown ***` no arquivo de teste.
    
üîπ Bibliotecas library DateTime

    A biblioteca DateTime √© uma das bibliotecas padr√£o do Robot Framework e 
    fornece keywords para trabalhar com datas e horas. Com a biblioteca DateTime, 
    √© poss√≠vel realizar opera√ß√µes como adicionar ou subtrair tempo de uma data, 
    formatar datas e horas e calcular a diferen√ßa entre duas datas.
    Algumas das keywords mais comuns da biblioteca DateTime incluem:

    Get Current Date: retorna a data atual no formato YYYY-MM-DD.
    Get Current Time: retorna a hora atual no formato HH:MM:SS.
    Get Current Date Time: retorna a data e hora atual no formato YYYY-MM-DD HH:MM:SS.
    Convert Date: converte uma data de um formato para outro.
    Convert Time: converte uma hora de um formato para outro.
    Add Time To Date: adiciona uma quantidade de tempo a uma data.
    Subtract Time From Date: subtrai uma quantidade de tempo de uma data.
    Subtract Date From Date: calcula a diferen√ßa entre duas datas.
    Para usar a biblioteca DateTime em um arquivo de teste do Robot Framework, 
    basta adicionar a linha Library DateTime √† se√ß√£o Settings do arquivo. 
    Em seguida, √© poss√≠vel usar as keywords da biblioteca em casos de teste.


üîπ Biblioteca OperatingSystem 

    fornece keywords para interagir com o sistema operacional em que o Robot Framework 
    est√° sendo executado. Algumas das keywords mais usadas s√£o:

    Get Environment Variable: Retorna o valor de uma vari√°vel de ambiente do sistema operacional.
    Get File: Retorna o conte√∫do de um arquivo.
    Get File Size: Retorna o tamanho de um arquivo em bytes.
    Get Hostname: Retorna o nome do host do sistema.
    Get Process Id: Retorna o ID do processo atual.
    Get Special Folder Path: Retorna o caminho para uma pasta especial do sistema operacional, 
    como a pasta de documentos ou a pasta de downloads.
    Get Time: Retorna a hora atual do sistema.
    List Directory: Retorna uma lista de arquivos e pastas em um diret√≥rio.
    Remove Directory: Remove um diret√≥rio e todo o seu conte√∫do.
    Remove File: Remove um arquivo.
    Run: Executa um comando no terminal do sistema operacional.
    Set Environment Variable: Define o valor de uma vari√°vel de ambiente do sistema operacional.
    Sleep: Pausa a execu√ß√£o do teste por um determinado n√∫mero de segundos.
    Start Process: Inicia um processo em segundo plano e retorna seu ID.
    Stop Process: Para um processo em segundo plano com base em seu ID.
    Essas s√£o apenas algumas das keywords dispon√≠veis na biblioteca OperatingSystem. Para ver a lista 
    completa de keywords e suas descri√ß√µes, consulte a documenta√ß√£o oficial do Robot Framework.

üîπ Biblioteca String 

    Fornece keywords para manipular strings em testes do Robot Framework. 
    Algumas das keywords mais usadas s√£o:

    Split String: Divide uma string em uma lista de substrings com base em um separador.
    Get Substring: Retorna uma substring de uma string com base em um √≠ndice inicial e final.
    Length Should Be: Verifica se o comprimento de uma string √© igual a um valor especificado.
    Should Be Empty: Verifica se uma string est√° vazia.
    Should Contain: Verifica se uma string cont√©m um determinado valor.
    Should End With: Verifica se uma string termina com um determinado valor.
    Should Match: Verifica se uma string corresponde a uma express√£o regular.
    Should Not Be Empty: Verifica se uma string n√£o est√° vazia.
    Should Not Contain: Verifica se uma string n√£o cont√©m um determinado valor.
    Should Not End With: Verifica se uma string n√£o termina com um determinado valor.
    Should Not Match: Verifica se uma string n√£o corresponde a uma express√£o regular.
    Should Start With: Verifica se uma string come√ßa com um determinado valor.
    To Lowercase: Converte uma string para min√∫sculas.
    To Uppercase: Converte uma string para mai√∫sculas.
    Essas s√£o apenas algumas das keywords dispon√≠veis na biblioteca String. 
    Para ver a lista completa de keywords e suas descri√ß√µes, 
    consulte a documenta√ß√£o oficial do Robot Framework.


üîπ Biblioteca Collections 

    Fornece keywords para trabalhar com listas, dicion√°rios e outros 
    tipos de cole√ß√µes de dados. Algumas das keywords mais usadas s√£o:

    Create Dictionary: Cria um dicion√°rio com pares chave-valor especificados.
    Get From Dictionary: Retorna o valor de uma chave em um dicion√°rio.
    Get Length: Retorna o comprimento de uma lista ou string.
    Get Slice: Retorna uma parte de uma lista ou string com base em um √≠ndice inicial e final.
    List Should Contain: Verifica se uma lista cont√©m um determinado valor.
    List Should Not Contain: Verifica se uma lista n√£o cont√©m um determinado valor.
    Log List: Imprime uma lista no console de sa√≠da do Robot Framework.
    Remove From List: Remove um valor de uma lista.
    Set Variable If: Define o valor de uma vari√°vel com base em uma condi√ß√£o.


üîπ Biblioteca Process
    
    Fornece keywords para trabalhar com processos em segundo plano. 
    Algumas das keywords mais usadas s√£o:

    Start Process: Inicia um processo em segundo plano e retorna seu ID.
    Stop Process: Para um processo em segundo plano com base em seu ID.
    Get Process Result: Retorna o resultado de um processo em segundo plano com base em seu ID.
    Get Process Return Code: Retorna o c√≥digo de retorno de um processo em segundo plano com base em seu ID.
    Get Process Output: Retorna a sa√≠da de um processo em segundo plano com base em seu ID.
    Get Process Error Output: Retorna a sa√≠da de erro de um processo em segundo plano com base em seu ID.
    Essas s√£o apenas algumas das keywords dispon√≠veis nas bibliotecas Collections e Process. 
    Para ver a lista completa de keywords e suas descri√ß√µes, consulte a documenta√ß√£o oficial do Robot Framework.